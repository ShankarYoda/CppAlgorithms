Problem Statement: Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.
We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.
You must solve this problem without using the library's sort function.

You will get this problem better with the below sample test cases:
Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]

Input: nums = [2,0,1]
Output: [0,1,2]

Solution In C++
****************

//0-(i-1)--->All 0s will be there
//i-(j-1)--->All 1s will be there
//(j)-(k-1)--->All unknowns will be there
//k-(n-1)---->All 2s will be there
class Solution {
public:
    void sortColors(vector<int>& nums) {
        int i = 0;
        int j = i;
        int k = nums.size()-1;

        while(j <= k){
            if(nums[j] == 0){
                int temp = nums[j];
                nums[j] = nums[i];
                nums[i] = temp;
                i++;
                j++;
            }
            else if(nums[j] == 1){
                j++;
            }
            else{
               int temp = nums[k];
                nums[k] = nums[j];
                nums[j] = temp;
                k--;
            }
        }
    }
};
